{"ast":null,"code":"var _jsxFileName = \"/Users/laura/Dev/FrontEndChatterBox/src/components/allChannels/all-channels.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Channel } from './channel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const AllChannels = () => {\n  _s();\n\n  const {\n    id,\n    username,\n    token,\n    email\n  } = JSON.parse(localStorage.getItem('user'));\n  const [channels, setChannels] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(async () => {\n    const response = await axios({\n      method: 'get',\n      url: `http://localhost:8080/channel-controller/readAll`,\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n\n    if (response.data.length > 0) {\n      setChannels(response.data);\n    }\n\n    setLoading(false);\n  }, []);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"All Channels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), channels.map(channel => /*#__PURE__*/_jsxDEV(Channel, {\n      name: channel.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 38\n    }, this))]\n  }, void 0, true);\n};\n\n_s(AllChannels, \"7h95Zg+HGOl5WCxWNZzgnlIqis4=\");\n\n_c = AllChannels;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllChannels\");","map":{"version":3,"sources":["/Users/laura/Dev/FrontEndChatterBox/src/components/allChannels/all-channels.js"],"names":["React","useEffect","useState","axios","Channel","AllChannels","id","username","token","email","JSON","parse","localStorage","getItem","channels","setChannels","loading","setLoading","response","method","url","headers","data","length","map","channel","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,WAAxB;;;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAE7B,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,QAAN;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB,MAAiCC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAvC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,IAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAE,YAAY;AACnB,UAAMiB,QAAQ,GAAG,MAAMf,KAAK,CAAC;AACzBgB,MAAAA,MAAM,EAAE,KADiB;AAEzBC,MAAAA,GAAG,EAAG,kDAFmB;AAGzBC,MAAAA,OAAO,EAAE;AAAE,yBAAkB,UAASb,KAAM;AAAnC;AAHgB,KAAD,CAA5B;;AAKA,QAAIU,QAAQ,CAACI,IAAT,CAAcC,MAAd,GAAuB,CAA3B,EAA8B;AAC1BR,MAAAA,WAAW,CAACG,QAAQ,CAACI,IAAV,CAAX;AACH;;AACDL,IAAAA,UAAU,CAAC,KAAD,CAAV;AACH,GAVQ,EAUN,EAVM,CAAT;;AAYA,MAAID,OAAJ,EAAa;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKF,QAAQ,CAACU,GAAT,CAAaC,OAAO,iBAAI,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEA,OAAO,CAACC;AAAvB;AAAA;AAAA;AAAA;AAAA,YAAxB,CAFL;AAAA,kBADJ;AAMH,CA5BM;;GAAMrB,W;;KAAAA,W","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Channel } from './channel';\n\nexport const AllChannels = () => {\n\n    const { id, username, token, email } = JSON.parse(localStorage.getItem('user'));\n    const [channels, setChannels] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect( async () => {\n        const response = await axios({\n            method: 'get',\n            url: `http://localhost:8080/channel-controller/readAll`,\n            headers: { 'Authorization': `Bearer ${token}`}\n        });\n        if (response.data.length > 0) {\n            setChannels(response.data);\n        }\n        setLoading(false);\n    }, [])\n\n    if (loading) {\n        return <h1>Loading...</h1>\n    }\n\n    return (\n        <>\n            <h1>All Channels</h1>\n            {channels.map(channel => <Channel name={channel.name} />)}\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}