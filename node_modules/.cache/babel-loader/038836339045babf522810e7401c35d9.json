{"ast":null,"code":"var _jsxFileName = \"/Users/laura/Dev/FrontEndChatterBox/src/components/direct-messages/searchBar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { TextField } from '@material-ui/core';\nimport './direct-message.css';\nimport { useHistory } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const SearchBar = () => {\n  _s();\n\n  const user = JSON.parse(localStorage.getItem('user'));\n  const {\n    id,\n    token,\n    username\n  } = user;\n  const [search, setSearch] = useState('');\n  const [profiles, setProfiles] = useState({});\n  const [profilesFound, setProfilesFound] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const history = useHistory();\n\n  const handleChange = event => {\n    setSearch(event.target.value);\n  };\n\n  useEffect(async () => {\n    console.log(token);\n    const response = await axios.get('http://localhost:8080/profile/findAll', {\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    setProfiles(response.data);\n    setLoading(false);\n    console.log(response);\n  }, []);\n\n  const handleClick = async profile => {\n    const name1 = `${username}&${profile.username}`;\n    const name2 = `${profile.username}&${username}`;\n    const channelExists1 = await axios({\n      method: 'get',\n      url: `http://localhost:8080/channel-controller/exists/${name1}`,\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n\n    if (channelExists1.data) {\n      history.push(`/dm/${name1}`);\n      return;\n    }\n\n    const channelExists2 = await axios({\n      method: 'get',\n      url: `http://localhost:8080/channel-controller/exists/${name2}`,\n      headers: {\n        'Authorization': `Bearer ${token}`\n      }\n    });\n\n    if (channelExists2.data) {\n      history.push(`/dm/${name2}`);\n      return;\n    }\n\n    const response = await axios({\n      method: 'post',\n      url: 'http://localhost:8080/channel-controller/create',\n      data: {\n        name: name1,\n        type: 'DM'\n      },\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    console.log(response.data);\n    history.push(`/dm/${name1}`);\n  }; // useEffect( () => {\n  //     setProfilesFound(profiles.filter(profile => profile.username.includes(search)));\n  // }, [search]);\n\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      value: search,\n      onChange: handleChange,\n      variant: \"outlined\",\n      size: \"small\",\n      type: \"search\",\n      fullWidth: true,\n      placeholder: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), profiles.filter(profile => {\n      if (search === '') return;\n      if (profile.username.toLowerCase().includes(search.toLowerCase())) return profile;\n    }).map(profile => /*#__PURE__*/_jsxDEV(\"p\", {\n      onClick: () => handleClick(profile),\n      children: profile.username\n    }, profile.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 29\n    }, this))]\n  }, void 0, true);\n};\n\n_s(SearchBar, \"GLxFho9V1gJDODmd7ZTlzSIUznE=\", false, function () {\n  return [useHistory];\n});\n\n_c = SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/Users/laura/Dev/FrontEndChatterBox/src/components/direct-messages/searchBar.js"],"names":["React","useEffect","useState","axios","TextField","useHistory","SearchBar","user","JSON","parse","localStorage","getItem","id","token","username","search","setSearch","profiles","setProfiles","profilesFound","setProfilesFound","loading","setLoading","history","handleChange","event","target","value","console","log","response","get","headers","data","handleClick","profile","name1","name2","channelExists1","method","url","push","channelExists2","name","type","filter","toLowerCase","includes","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { TextField } from '@material-ui/core';\nimport './direct-message.css';\nimport { useHistory } from 'react-router';\n\nexport const SearchBar = () => {\n\n    const user = JSON.parse(localStorage.getItem('user'));\n    const { id, token, username } = user;\n    const [search, setSearch] = useState('');\n    const [profiles, setProfiles] = useState({});\n    const [profilesFound, setProfilesFound] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const history = useHistory();\n\n    const handleChange = (event) => {\n        setSearch(event.target.value)\n    }\n\n    useEffect (async () => {\n        console.log(token);\n        const response = await axios.get('http://localhost:8080/profile/findAll', {\n            headers: {\n                'Authorization': `Bearer ${token}`\n            }\n        });\n        setProfiles(response.data);\n        setLoading(false);\n        console.log(response);\n    }, []);\n\n    const handleClick = async (profile) => {\n        const name1 = `${username}&${profile.username}`;\n        const name2 = `${profile.username}&${username}`;\n        const channelExists1 = await axios({\n            method: 'get',\n            url: `http://localhost:8080/channel-controller/exists/${name1}`,\n            headers: { 'Authorization': `Bearer ${token}`}\n        });\n        if (channelExists1.data) {\n            history.push(`/dm/${name1}`)\n            return\n        }\n        const channelExists2 = await axios({\n            method: 'get',\n            url: `http://localhost:8080/channel-controller/exists/${name2}`,\n            headers: { 'Authorization': `Bearer ${token}`}\n        });\n        if (channelExists2.data) {\n            history.push(`/dm/${name2}`)\n            return\n        }\n        const response = await axios({\n                method: 'post',\n                url: 'http://localhost:8080/channel-controller/create',\n                data: {\n                    name: name1,\n                    type: 'DM'\n                },\n                headers: {'Content-Type': 'application/json', 'Authorization': `Bearer ${token}`}\n            });\n        console.log(response.data)\n        history.push(`/dm/${name1}`);\n    }\n\n    // useEffect( () => {\n    //     setProfilesFound(profiles.filter(profile => profile.username.includes(search)));\n    // }, [search]);\n\n    if (loading) {\n        return <p>Loading</p>\n    }\n    return (\n        <>\n            <TextField value={search} onChange={handleChange} variant='outlined' size='small' type='search' fullWidth placeholder='Search' />\n            {profiles.filter(profile => {\n                if (search === '') return \n                if (profile.username.toLowerCase().includes(search.toLowerCase())) return profile;\n            })\n            .map(profile => <p onClick={() => handleClick(profile)} key={profile.id}>{profile.username}</p>)}\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}