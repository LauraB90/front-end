{"ast":null,"code":"var _jsxFileName = \"/Users/laura/Dev/FrontEndChatterBox/src/components/register/register.js\",\n    _s = $RefreshSig$();\n\nimport { Grid, Paper, TextField, Button } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport validator from 'validator';\nimport axios from 'axios';\nimport './register.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Register = () => {\n  _s();\n\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [email, setEmail] = useState('');\n  const [invalidEmail, setInvalidEmail] = useState(false);\n  const [invalidUsername, setInvalidUsername] = useState(false);\n  const [invalidPassword, setInvalidPassword] = useState(false);\n  const [invalidEmailMessage, setInvalidEmailMessage] = useState('That is an invalid email');\n  const [invalidUsernameMessage, setInvalidUsernameMessage] = useState('');\n  const history = useHistory();\n\n  const registerProfile = async event => {\n    event.preventDefault();\n\n    if (!emailValidation(email)) {\n      setInvalidEmail(true);\n      console.log('email');\n    }\n\n    if (!passwordValidation(password)) {\n      setInvalidPassword(true);\n      console.log('pass');\n    } else {\n      console.log(); // const response = await axios.post('/profile/register',\n      //     { data: {\n      //         firstName: firstName,\n      //         lastName: lastName,\n      //         username: username,\n      //         password: password,\n      //         email: email\n      //         }\n      //     },\n      //     headers: {\n      //         'Content-Type': 'application/json'\n      //     }\n      // );\n\n      const response = await axios({\n        method: 'post',\n        url: 'http://localhost:8080/profile/register',\n        data: {\n          firstName: firstName,\n          lastName: lastName,\n          username: username,\n          password: password,\n          email: email\n        },\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log(response.data);\n\n      if (response.data.username) {\n        history.push('/');\n      } else if (response.data.includes('Username')) {\n        setInvalidUsername(true);\n        setInvalidUsernameMessage(response.data);\n      } else if (response.data.includes('Email')) {\n        setInvalidEmail(true);\n        setInvalidEmailMessage(response.data);\n      } // catch(error) {\n      //     console.log(error);\n      //     if (error.data.contains('username')) {\n      //         setInvalidUsernameMessage(error.data);\n      //     }\n      // }\n\n    }\n  };\n\n  const emailValidation = email => {\n    if (validator.isEmail(email)) return true;\n    return false;\n  };\n\n  const passwordValidation = pasword => {\n    if (password.length > 5) return true;\n    return false;\n  };\n\n  const usernameValidation = username => {\n    axios.get();\n  };\n\n  const resetTextFields = () => {\n    setUsername('');\n    setPassword('');\n    setFirstName('');\n    setLastName('');\n    setEmail('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    align: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      className: \"paper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Registration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), invalidUsername && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: invalidUsernameMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Username\",\n        variant: \"outlined\",\n        fullWidth: true,\n        margin: \"normal\",\n        size: \"small\",\n        value: username,\n        onChange: input => setUsername(input.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), invalidPassword && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: \"Password must be at least 6 characters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Password\",\n        variant: \"outlined\",\n        fullWidth: true,\n        margin: \"normal\",\n        type: \"password\",\n        size: \"small\",\n        value: password,\n        onChange: input => setPassword(input.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"First Name\",\n        variant: \"outlined\",\n        fullWidth: true,\n        margin: \"normal\",\n        size: \"small\",\n        value: firstName,\n        onChange: input => setFirstName(input.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Last Name\",\n        variant: \"outlined\",\n        fullWidth: true,\n        margin: \"normal\",\n        size: \"small\",\n        value: lastName,\n        onChange: input => setLastName(input.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), invalidEmail && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: invalidEmailMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Email\",\n        type: \"email\",\n        variant: \"outlined\",\n        fullWidth: true,\n        margin: \"normal\",\n        size: \"small\",\n        value: email,\n        onChange: input => setEmail(input.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        fullWidth: true,\n        onClick: registerProfile,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Register, \"/eEgKn6kLYXi9mqTdbEWUj2VfMk=\", false, function () {\n  return [useHistory];\n});\n\n_c = Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["/Users/laura/Dev/FrontEndChatterBox/src/components/register/register.js"],"names":["Grid","Paper","TextField","Button","React","useState","useHistory","validator","axios","Register","username","setUsername","password","setPassword","firstName","setFirstName","lastName","setLastName","email","setEmail","invalidEmail","setInvalidEmail","invalidUsername","setInvalidUsername","invalidPassword","setInvalidPassword","invalidEmailMessage","setInvalidEmailMessage","invalidUsernameMessage","setInvalidUsernameMessage","history","registerProfile","event","preventDefault","emailValidation","console","log","passwordValidation","response","method","url","data","headers","push","includes","isEmail","pasword","length","usernameValidation","get","resetTextFields","input","target","value"],"mappings":"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","sourcesContent":["import { Grid, Paper, TextField, Button } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport validator from 'validator';\nimport axios from 'axios';\nimport './register.css';\n\n\nexport const Register = () => {\n\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [email, setEmail] = useState('');\n    const [invalidEmail, setInvalidEmail] = useState(false);\n    const [invalidUsername, setInvalidUsername] = useState(false);\n    const [invalidPassword, setInvalidPassword] = useState(false);\n    const [invalidEmailMessage, setInvalidEmailMessage] = useState('That is an invalid email');\n    const [invalidUsernameMessage, setInvalidUsernameMessage] = useState('');\n    const history = useHistory();\n\n    const registerProfile = async (event) => {\n        event.preventDefault();\n        if (!emailValidation(email)) {\n            setInvalidEmail(true);\n            console.log('email')\n        } \n        if (!passwordValidation(password)) {\n            setInvalidPassword(true);\n            console.log('pass')\n        } else {\n            console.log()\n            // const response = await axios.post('/profile/register',\n            //     { data: {\n            //         firstName: firstName,\n            //         lastName: lastName,\n            //         username: username,\n            //         password: password,\n            //         email: email\n            //         }\n            //     },\n            //     headers: {\n            //         'Content-Type': 'application/json'\n            //     }\n            // );\n            const response = await axios({\n                method: 'post',\n                url: 'http://localhost:8080/profile/register',\n                data: {\n                    firstName: firstName,\n                    lastName: lastName,\n                    username: username,\n                    password: password,\n                    email: email\n                },\n                headers: {'Content-Type': 'application/json'}\n            });\n            console.log(response.data);\n            if (response.data.username) {\n                history.push('/');\n            }\n            else if (response.data.includes('Username')) {\n                setInvalidUsername(true);\n                setInvalidUsernameMessage(response.data);\n            }\n            else if (response.data.includes('Email')) {\n                setInvalidEmail(true);\n                setInvalidEmailMessage(response.data);\n            }\n            \n            \n                \n            // catch(error) {\n            //     console.log(error);\n            //     if (error.data.contains('username')) {\n            //         setInvalidUsernameMessage(error.data);\n            //     }\n            // }\n            \n        }\n        \n    }\n\n    const emailValidation = (email) => {\n        if (validator.isEmail(email)) return true;\n        return false;\n    }\n\n    const passwordValidation = (pasword) => {\n        if (password.length > 5) return true;\n        return false;\n    }\n\n    const usernameValidation = (username) => {\n        axios.get()\n\n    }\n\n    const resetTextFields = () => {\n        setUsername('');\n        setPassword('');\n        setFirstName('');\n        setLastName('');\n        setEmail('');\n    }\n\n    return (\n        <Grid align='center'>\n            <Paper className='paper'>\n                <h1>Registration</h1>\n                {invalidUsername && <p className='error'>{invalidUsernameMessage}</p>}\n                <TextField label='Username' variant='outlined' fullWidth margin='normal' size='small'\n                value={username} onChange={(input) => setUsername(input.target.value)}/>\n                \n                {invalidPassword && <p className='error'>Password must be at least 6 characters</p>}\n                <TextField label='Password' variant='outlined' fullWidth margin='normal' type='password' size='small'\n                value={password} onChange={(input) => setPassword(input.target.value)}/>\n                \n                <TextField label='First Name' variant='outlined' fullWidth margin='normal' size='small'\n                value={firstName} onChange={(input) => setFirstName(input.target.value)}/>\n                \n                <TextField label='Last Name' variant='outlined' fullWidth margin='normal' size='small'\n                value={lastName} onChange={(input) => setLastName(input.target.value)}/>\n                \n                {invalidEmail && <p className='error'>{invalidEmailMessage}</p>}\n                <TextField label='Email' type='email' variant='outlined' fullWidth margin='normal' size='small'\n                value={email} onChange={(input) => setEmail(input.target.value)}/>\n                \n                <Button variant='contained' color='primary' fullWidth\n                onClick={registerProfile}>Register</Button>\n            </Paper>\n        </Grid>\n    )\n}"]},"metadata":{},"sourceType":"module"}